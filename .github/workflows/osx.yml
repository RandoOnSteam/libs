name: osx-build

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: false

            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os: [macos-latest]
                build_type: [Debug, Release]
                c_compiler: [gcc, clang]
                include:
                    - os: macos-latest
                      c_compiler: clang
                      cpp_compiler: clang++
                exclude:
                    - os: macos-latest
                      c_compiler: gcc

        steps:
            - uses: actions/checkout@v4

            - name: Set reusable strings
              # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                  echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            - name: Install dependencies (Linux only)
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install libwayland-dev libwayland-egl-backend-dev libx11-dev libglx-dev libegl1-mesa-dev libglu1-mesa-dev libxxf86vm-dev libxinerama-dev libxrandr-dev libgtk-3-dev libgtk-4-dev libkf5i18n-dev libkf5coreaddons-dev libkf5configwidgets-dev libkf5dbusaddons-dev libkf5globalaccel-dev libkf5iconthemes-dev libkf5service-dev libkf5notifications-dev libkf5textwidgets-dev libkf5windowsystem-dev libkf5widgetsaddons-dev libkf5xmlgui-dev qtbase5-dev libasound2-dev

           # - name: Install dependencies (macOS only)
           #   if: matrix.os == 'macos-latest'
           #   run: |
           #       brew install gtk+3 gtk4
                  
            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: >
                  cmake -B ${{ steps.strings.outputs.build-output-dir }}
                  -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
                  -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  -S ${{ github.workspace }}

            - name: Build
              # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
              run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

            - name: Test
              working-directory: ${{ steps.strings.outputs.build-output-dir }}
              # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
              # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
              run: ctest --build-config ${{ matrix.build_type }}
